<!DOCTYPE html>
<html>
<head>
    <title>User Management System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .user-card {
            transition: transform 0.2s;
            margin-bottom: 20px;
        }
        .user-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        .cache-status {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 10px;
            border-radius: 5px;
            background: #f8f9fa;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .loading {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
        }
    </style>
</head>
<body>
    <div class="container py-5">
        <!-- Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>User Management</h1>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addUserModal">
                <i class="fas fa-plus"></i> Add New User
            </button>
        </div>

        <!-- Alert Messages -->
        <% if (message) { %>
            <div class="alert alert-info alert-dismissible fade show" role="alert">
                <%= message %>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>
        <% } %>

        <!-- Users Grid -->
        <div class="row" id="users-container">
            <% users.forEach(function(user) { %>
                <div class="col-md-4 user-card" data-user-id="<%= user._id %>">
                    <div class="card">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <h5 class="card-title"><%= user.name %></h5>
                                <div class="dropdown">
                                    <button class="btn btn-link" data-bs-toggle="dropdown">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li>
                                            <a class="dropdown-item edit-user" href="#" 
                                               data-user='<%= JSON.stringify(user) %>'>
                                                <i class="fas fa-edit"></i> Edit
                                            </a>
                                        </li>
                                        <li>
                                            <a class="dropdown-item delete-user" href="#" 
                                               data-user-id="<%= user._id %>">
                                                <i class="fas fa-trash"></i> Delete
                                            </a>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                            <p class="card-text">
                                <i class="fas fa-envelope"></i> <%= user.email %><br>
                                <i class="fas fa-birthday-cake"></i> Age: <%= user.age %>
                            </p>
                        </div>
                    </div>
                </div>
            <% }); %>
        </div>

        <!-- Add User Modal -->
        <div class="modal fade" id="addUserModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Add New User</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="addUserForm">
                            <div class="mb-3">
                                <label class="form-label">Name</label>
                                <input type="text" class="form-control" name="name" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control" name="email" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Age</label>
                                <input type="number" class="form-control" name="age" required>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="saveUserBtn">Save User</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Edit User Modal -->
        <div class="modal fade" id="editUserModal" tabindex="-1">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit User</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="editUserForm">
                            <input type="hidden" name="userId">
                            <div class="mb-3">
                                <label class="form-label">Name</label>
                                <input type="text" class="form-control" name="name" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Email</label>
                                <input type="email" class="form-control" name="email" required>
                            </div>
                            <div class="mb-3">
                                <label class="form-label">Age</label>
                                <input type="number" class="form-control" name="age" required>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="updateUserBtn">Update User</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Loading Spinner -->
        <div class="loading">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>

        <!-- Cache Status -->
        <div class="cache-status">
            <small class="text-muted">
                <i class="fas fa-clock"></i> Cache Status: <span id="cacheStatus">-</span>
            </small>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Client-side JavaScript for handling user interactions
        document.addEventListener('DOMContentLoaded', function() {
            // Add User
            document.getElementById('saveUserBtn').addEventListener('click', async function() {
                const form = document.getElementById('addUserForm');
                const formData = new FormData(form);
                const userData = Object.fromEntries(formData);

                try {
                    const response = await fetch('/users', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(userData)
                    });

                    if (response.ok) {
                        location.reload();
                    } else {
                        throw new Error('Failed to add user');
                    }
                } catch (error) {
                    Swal.fire('Error', error.message, 'error');
                }
            });

            // Edit User
            document.querySelectorAll('.edit-user').forEach(btn => {
                btn.addEventListener('click', function() {
                    const user = JSON.parse(this.dataset.user);
                    const form = document.getElementById('editUserForm');
                    form.userId.value = user._id;
                    form.name.value = user.name;
                    form.email.value = user.email;
                    form.age.value = user.age;
                    new bootstrap.Modal(document.getElementById('editUserModal')).show();
                });
            });

            // Update User
            document.getElementById('updateUserBtn').addEventListener('click', async function() {
                const form = document.getElementById('editUserForm');
                const userId = form.userId.value;
                const formData = new FormData(form);
                const userData = Object.fromEntries(formData);

                try {
                    const response = await fetch(`/users/${userId}`, {
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(userData)
                    });

                    if (response.ok) {
                        location.reload();
                    } else {
                        throw new Error('Failed to update user');
                    }
                } catch (error) {
                    Swal.fire('Error', error.message, 'error');
                }
            });

            // Delete User
            document.querySelectorAll('.delete-user').forEach(btn => {
                btn.addEventListener('click', async function() {
                    const userId = this.dataset.userId;
                    
                    const result = await Swal.fire({
                        title: 'Are you sure?',
                        text: "You won't be able to revert this!",
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Yes, delete it!'
                    });

                    if (result.isConfirmed) {
                        try {
                            const response = await fetch(`/users/${userId}`, {
                                method: 'DELETE'
                            });

                            if (response.ok) {
                                document.querySelector(`[data-user-id="${userId}"]`).remove();
                                Swal.fire('Deleted!', 'User has been deleted.', 'success');
                            } else {
                                throw new Error('Failed to delete user');
                            }
                        } catch (error) {
                            Swal.fire('Error', error.message, 'error');
                        }
                    }
                });
            });

            // Update cache status
            function updateCacheStatus() {
                fetch('/cache-stats')
                    .then(response => response.json())
                    .then(data => {
                        document.getElementById('cacheStatus').textContent = 
                            `${data.totalCacheEntries} entries`;
                    });
            }

            setInterval(updateCacheStatus, 5000);
            updateCacheStatus();
        });
    </script>
</body>
</html> 